Setup Superset 




1. Task requirement


To run the superset with a podman play kube which is generated with the helm chart of the superset.


Superset is a modern data exploration and data visualisation platform. Superset can replace or augment proprietary business intelligence tools for many teams. Superset integrates well with a variety of data sources. Superset provides: A no-code interface for building charts quickly.
2. Environment details


* OS: Ubuntu 20.04 


List of tools and technologies


* Podman version 3.4.2
* Helm version 3.12.1


Others


* Vim
* Bash




Definition of tools


* Podman - It is an open source tool for developing, managing, and running containers on your Linux systems. 
* Helm - It is a tool that streamlines installing and managing Kubernetes applications.
* Kubernetes - 
* Vim - It is a highly configurable text editor built to make creating and changing any kind of text very efficient
* Bash - It is the command line shell that you encounter when you open the terminal on most Unix operating systems, like MacOS and Linux.




1. Command for the setup or configuration






Step 1.  Adding Helm GPG Key.
$ curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
	 
* curl <https://baltocdn.com/helm/signing.asc:> 
curl : To download the contents of the specified URL, which appears to be the GPG (GNU Privacy Guard) signing key for Helm, a package manager for Kubernetes.

* gpg --dearmor: In GPG, "dearmor" means to convert a GPG public or private key from the binary format to a text-based format. This is often done for distribution or storage purposes.

* sudo tee /usr/share/keyrings/helm.gpg > /dev/null : This part of the command uses tee to write the output of the previous gpg command to the file /usr/share/keyrings/helm.gpg.

* > /dev/null : redirects the standard output (stdout) to the "null" device .




Output:   




Step 2. Adding Helm Repository to Package Sources.
$ echo "deb [arch=$(dpkg --print-architecture) sudsigned-by=/usr/share/keyrings/helm.gpg] shttps://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
	

   * echo : display the text/string on the terminal

   *  line tells the apt package manager to download Helm packages from the https://baltocdn.com/helm/stable/debian/ repository.

   * The arch=$(dpkg --print-architecture) : apt package manager to download the correct package for our system architecture.

   * The signed-by=/usr/share/keyrings/helm.gpg part tells the apt package manager to verify the authenticity of the packages using the GPG key that is stored in the file /usr/share/keyrings/helm.gpg.

   * Creates a new file called helm-stable-debian.list in the directory /etc/apt/sources.list.d/.

   * It adds the following line to the file: deb [arch=(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main




Output:  






Step 3. Updating Packages and Repositories.
$ sudo apt update
	

      * sudo: This stands for "Superuser Do" and is used to execute commands with superuser (administrator) privileges. It allows you to perform actions that require elevated permissions.
      * apt: This stands for "Advanced Package Tool." It's a command-line tool used to manage software packages on Debian-based systems. You can use it to install, update, remove, and manage software packages.
      * update: This is a subcommand of apt that instructs the package manager to update the package information. The package information is a database of available software packages, their versions, and where to download them from. This database needs to be refreshed periodically to ensure that your system has the latest information about available software.


Output:  




Step 4 : install helm.
$ sudo apt install helm
	

      * sudo: This prefix is used to execute the command with superuser (administrator) privileges. It allows you to install software system-wide.
      * apt: The package management tool used for managing software packages on Debian-based systems.
      * install: A command to instruct apt to install a specified package.
      * helm: The name of the package you want to install. In this case, "Helm" is a tool used for managing Kubernetes applications. Helm simplifies the process of deploying and managing complex applications on Kubernetes clusters.


Output:  


Step 5 : Verifying the installation and version.
$ helm version
	



Output:  




Step 6 :Create directory 
# mkdir superset-poc
	

      * mkdir:  It's used to create a new directory (folder) in the file system.
      * superset-poc: This is the name of the directory you want to create. 
Output:v




Step 7 :Go in to directory g
# cd superset-poc
	

      * cd: This is a command that stands for "change directory."
      * superset-poc: This is the name of the directory you want to navigate to. 
Output:
  





Step 8 :create yaml file and add details in it .
# vim value-stage.yaml
	

global:
  hosts:
        domain: example.com
postgresql:
  image:
        tag: 14.0
mecertmanager-issuer:
  email: me@example.com


      * vim: This is a command-line text editor that allows you to create, view, and edit text files directly within the terminal.
      * value-stage.yaml: This is the name of the file you want to open. 


Output:
  



Note : first i check hosts file and add domain .
For this i followed given steps 
      1. $ vim cat/etc/hosts 
      2. And add : 
192.168.1.254     fosteringlinux.com
      3. And save the file.
Now,
      4. In the vales-stageyaml file change the domain and email with your requirement.
      


clear
Step 9 : Creating Superset Deployment Configuration
#  helm template --dry-run --debug superset/superset --generate-name --values values-stage.yaml > superset-kube.yaml
	

      * helm template: This is the command that tells Helm to generate Kubernetes manifests based on a Helm chart.

      * --dry-run: This indicates Helm will simulate the installation without actually deploying anything. This is useful for seeing what manifests would be generated without affecting the cluster.

      * --debug: This enables debug output, providing more detailed information about the Helm template process.

      * superset/superset: This specifies the Helm chart to use for generating the Kubernetes manifests. The chart name is in the format repository/chart-name.

      * --generate-name: This generates a unique name for the release based on the chart's name. It's used when you want to create a new release without specifying a release name.

      * --values values-stage.yaml: This points to a values file (values-stage.yaml) that provides custom configuration values for the Helm chart.

      * > superset-kube.yaml: This part of the command uses the output redirection (>) to save the generated Kubernetes manifests to a file named superset-kube.yaml.

In summary, this command generates Kubernetes manifests for deploying the Superset application using a specific Helm chart and custom configuration values from the `values-stage.yaml` file. The generated manifests are saved in the `superset-kube.yaml` file. The use of `--dry-run` and `--debug` ensures that we can preview the manifests before actually deploying the application, it helps to verify that the configuration is correct.




Output : 
  



Problem 1. There i got above error .


For solving this i run below commands.
$  helm repo add superset https://apache.github.io/superset
	

$  helm repo update
	

For this I follow this link: https://stackoverflow.com/questions/66706363/where-is-the-superset-helm-chart


Problem 2. 


  





When I run this command I got the the above error.


To solve this, I change the file name that is incorrect while creating yaml file. The correct name is values-stage.yaml not value-stage.yaml .


Then i run the command.


#  helm template --dry-run --debug superset/superset --generate-name --values values-stage.yaml > superset-kube.yaml
	



Output:   




Step 10 : Edit  superset-kube.yaml and create a new final.yaml as per the requirement in podman play kube.


# vim final.yaml
	Add the below data -


--------------------------------------------------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
 name: kubepostgresql
spec:
 replicas: 1
 template:
        metadata:
         name: kubepostgresql
        spec:
         serviceAccountName: default
         securityContext:
           fsGroup: 1001
         hostNetwork: true
         hostIPC: false
         initContainers:
         containers:
           - name: postgresql
             image: docker.io/bitnami/postgresql:14.6.0-debian-11-r13
             imagePullPolicy: "IfNotPresent"
             securityContext:
               runAsUser: 1001
             env:
               - name: BITNAMI_DEBUG
                 value: "false"
               - name: POSTGRESQL_PORT_NUMBER
                 value: "5432"
               - name: POSTGRESQL_VOLUME_DIR
                 value: "/bitnami/postgresql"
               - name: PGDATA
                 value: "/bitnami/postgresql/data"
               - name: POSTGRES_USER
                 value: "superset"
               - name: POSTGRES_POSTGRES_PASSWORD
                 value: superset
               - name: POSTGRES_PASSWORD
                 value: superset
               - name: POSTGRES_DB
                 value: "superset"
               - name: POSTGRESQL_ENABLE_LDAP
                 value: "no"
               - name: POSTGRESQL_ENABLE_TLS
                 value: "no"
               - name: POSTGRESQL_LOG_HOSTNAME
                 value: "false"
               - name: POSTGRESQL_LOG_CONNECTIONS
                 value: "false"
               - name: POSTGRESQL_LOG_DISCONNECTIONS
                 value: "false"
               - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
                 value: "off"
               # Others
               - name: POSTGRESQL_CLIENT_MIN_MESSAGES
                 value: "error"
               - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
                 value: "pgaudit"
             ports:
               - name: tcp-postgresql
                 containerPort: 5432
             resources:
               limits: {}
               requests:
                 cpu: 250m
                 memory: 256Mi
             volumeMounts:
               - name: data
                 mountPath: /bitnami/postgresql
         volumes:
           - name: data
             hostPath:
               path: /home/maansi/superset-poc/postgres/
                type: Directory
---
# Source: superset/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
 name: kuberedis-master
spec:
 replicas: 1
 updateStrategy:
        type: RollingUpdate
 template:
        spec:
         securityContext:
           fsGroup: 1001
         terminationGracePeriodSeconds: 30
         containers:
           - name: redis
             image: docker.io/bitnami/redis:7.0.10-debian-11-r4
             imagePullPolicy: "IfNotPresent"
             securityContext:
               runAsUser: 1001
             command:
               - /bin/bash
             args:
               - -c
               - /opt/bitnami/scripts/start-scripts/start-master.sh
             env:
               - name: BITNAMI_DEBUG
                 value: "false"
               - name: REDIS_REPLICATION_MODE
                 value: master
               - name: ALLOW_EMPTY_PASSWORD
                 value: "yes"
               - name: REDIS_TLS_ENABLED
                 value: "no"
               - name: REDIS_PORT
                 value: "6379"
             ports:
               - name: redis
                 containerPort: 6379
                 hostPort: 6379
             resources:
               limits: {}
               requests: {}
             volumeMounts:
               - name: start-scripts
                 mountPath: /opt/bitnami/scripts/start-scripts/start-master.sh
                 subPath: start-master.sh
               - name: redis-data
                 mountPath: /data
               - name: config
                 mountPath: /opt/bitnami/redis/mounted-etc
         volumes:
           - name: start-scripts
             hostPath:
               path: /home/maansi/superset-poc/redis/start-master.sh
                type: FileOrCreate
               defaultMode: 0777
           - name: config
             hostPath:
               path: ./redis/redis-conf
               type: Directory
           - name: redis-data
             hostPath:
               path: ./redis/redis-data
               type: Directory
---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: kubesuperset-worker
spec:
 replicas: 1
 template:
        spec:
         securityContext:
           runAsUser: 0
         initContainers:
         - command:
           - /bin/sh
           - -c
           - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT"
             -timeout 120s
           env:
             - name: REDIS_HOST
               value: 192.168.1.254
             - name: REDIS_PORT
               value: 6379
             - name: DB_HOST
               value: 192.168.1.254
              - name: DB_PORT
               value: 5432
             - name: DB_USER
               value: superset
             - name: DB_PASS
               value: superset
             - name: DB_NAME
               value: superset
           image: 'apache/superset:dockerize'
           imagePullPolicy: 'IfNotPresent'
           name: wait-for-postgres-redis
         containers:
           - name: superset
             image: "apachesuperset.docker.scarf.sh/apache/superset:2.1.0"
             imagePullPolicy: IfNotPresent
             command: ["/bin/sh","-c",". /app/pythonpath/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker"]
             env:
               - name: "SUPERSET_PORT"
                 value: "8088"
               - name: REDIS_HOST
                 value: 192.168.1.254
               - name: REDIS_PORT
                 value: 6379
               - name: DB_HOST
                 value: 192.168.1.254
                - name: DB_PORT
                 value: 5432
               - name: DB_USER
                 value: superset
               - name: DB_PASS
                 value: superset
               - name: DB_NAME
                 value: superset
             volumeMounts:
               - name: superset-config
                 mountPath: "/app/pythonpath"
                 readOnly: true
             livenessProbe:
               exec:
                 command:
                 - sh
                 - -c
                 - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
               failureThreshold: 3
               initialDelaySeconds: 120
               periodSeconds: 60
               successThreshold: 1
               timeoutSeconds: 60
             resources:
               {}
         volumes:
           - name: superset-config
             hostPath:
               path: /home/maansi/superset-poc/superset/
               type: Directory
---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: kubesuperset
spec:
 replicas: 1
 template:
        spec:
         securityContext:
           runAsUser: 0
         initContainers:
         - command:
           - /bin/sh
           - -c
           - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
           env:
             - name: REDIS_HOST
               value: 192.168.1.254
             - name: REDIS_PORT
               value: 6379
             - name: DB_HOST
               value: 192.168.1.254
              - name: DB_PORT
               value: 5432
             - name: DB_USER
               value: superset
             - name: DB_PASS
               value: superset
             - name: DB_NAME
               value: superset
           image: 'apache/superset:dockerize'
           imagePullPolicy: 'IfNotPresent'
           name: wait-for-postgres
         containers:
           - name: superset
             image: "apachesuperset.docker.scarf.sh/apache/superset:2.1.0"
             imagePullPolicy: IfNotPresent
             command: ["/bin/sh","-c",". /app/pythonpath/superset_bootstrap.sh; /usr/bin/run-server.sh"]
             env:
               - name: "SUPERSET_PORT"
                 value: "8088"
               - name: "SUPERSET_PORT"
                 value: "8088"
               - name: REDIS_HOST
                 value: 192.168.1.254
               - name: REDIS_PORT
                 value: 6379
               - name: DB_HOST
                 value: 192.168.1.254
               - name: DB_PORT
                 value: 5432
               - name: DB_USER
                 value: superset
               - name: DB_PASS
                 value: superset
               - name: DB_NAME
                 value: superset
             volumeMounts:
               - name: superset-config
                 mountPath: "/app/pythonpath"
                 readOnly: true
             ports:
               - name: http
                 containerPort: 8088
                 hostPort: 8088
                 protocol: TCP
             resources:
               {}
         volumes:
           - name: superset-config
             hostPath:
               path: /home/maansi/superset-poc/superset/
                type: Directory
	--------------------------------------------------------------------------------------------------------------------------
Note : There i replace the path .
Example:


path: /home/harsh/superset/redis/start-master.sh
TTo this
path: /home/mansi/superset-poc/redis/start-master.sh


Also change the ip with your system ip.
And i also correct indentation of this yaml file.


Then save the file. 




Step 11 : Check list of file in current directory
# ls -lrth
	

The command ls -lrth is used to list the contents of a directory:
         * -l: Detailed (long) format showing permissions, owner, size, and more.
         * -r: Listing in reverse order.
         * -t: Sorting by modification time (most recent first).
         * -h: File sizes in a human-readable format.




lsOutput:  




Step 12 : create a script file and add details in it .
vim pre-install-task.sh    
	

         1. Bash Script: A Bash script is a file containing a sequence of commands written in the Bash scripting language. These commands can include system commands, variable assignments, conditionals, loops, and more. Bash scripts are used to automate tasks, perform system administration, and execute a series of actions.


Add in the below script------------------------------------------------------------------------------------------
#!/bin/bash

mkdir superset
mkdir redis
mkdir postgres

cat <<- END > superset/superset_bootstrap.sh
        #!/bin/bash
        if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid 0" > ~/bootstrap; fi

END

cat <<- END > superset/superset_config.py
import os
from cachelib.redis import RedisCache
   
def env(key, default=None):
        return os.getenv(key, default)
   
MAPBOX_API_KEY = env('MAPBOX_API_KEY', '')
CACHE_CONFIG = {
           'CACHE_TYPE': 'RedisCache',
           'CACHE_DEFAULT_TIMEOUT': 300,
           'CACHE_KEY_PREFIX': 'superset_',
           'CACHE_REDIS_HOST': env('REDIS_HOST'),
           'CACHE_REDIS_PORT': env('REDIS_PORT'),
           'CACHE_REDIS_PASSWORD': env('REDIS_PASSWORD'),
           'CACHE_REDIS_DB': env('REDIS_DB', 1),
}
DATA_CACHE_CONFIG = CACHE_CONFIG
   
SQLALCHEMY_DATABASE_URI = f"postgresql+psycopg2://{env('DB_USER')}:{env('DB_PASS')}@{env('DB_HOST')}:{env('DB_PORT')}/{env('DB_NAME')}"
SQLALCHEMY_TRACK_MODIFICATIONS = True
SECRET_KEY = env('SECRET_KEY', 'thisISaSECRET_1234')
   
class CeleryConfig(object):
        CELERY_IMPORTS = ('superset.sql_lab', )
        CELERY_ANNOTATIONS = {'tasks.add': {'rate_limit': '10/s'}}
        BROKER_URL = f"redis://{env('REDIS_HOST')}:{env('REDIS_PORT')}/0"
        CELERY_RESULT_BACKEND = f"redis://{env('REDIS_HOST')}:{env('REDIS_PORT')}/0"
   
CELERY_CONFIG = CeleryConfig
RESULTS_BACKEND = RedisCache(
           host=env('REDIS_HOST'),
           port=env('REDIS_PORT'),
           key_prefix='superset_results'
)
END
cat <<- END > superset/superset_init.sh
#!/bin/sh
set -eu
echo "Upgrading DB schema..."
superset db upgrade
echo "Initializing roles..."
superset init
   
echo "Creating admin user..."
superset fab create-admin \
                  --username admin \
                       --firstname Superset \
                       --lastname Admin \
                       --email admin@superset.com \
                       --password admin \
                       || true
   
if [ -f "/app/configs/import_datasources.yaml" ]; then
  echo "Importing database connections.... "
  superset import_datasources -p /app/configs/import_datasources.yaml
fi
END
mkdir redis/redis-conf
cat <<- END > redis/redis-conf/master.conf
        dir /data
        # User-supplied master configuration:
        rename-command FLUSHDB ""
        rename-command FLUSHALL ""
        # End of master configuration
END

cat <<- END > redis/redis-conf/redis.conf
        appendonly yes
        save ""
END

cat <<- END > redis/redis-conf/replica.conf
           dir /data
        rename-command FLUSHDB ""
        rename-command FLUSHALL ""
END

mkdir -p redis/redis-data
cat <<- END > redis/master-redis.sh
        #!/bin/bash
        [[ -f \$REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="\$(< "\${REDIS_PASSWORD_FILE}")"
        if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
           cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
        fi
        if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
           cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
        fi
        ARGS=("--port" "\${REDIS_PORT}")
        ARGS+=("--protected-mode" "no")
        ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
        ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
        exec redis-server "\${ARGS[@]}"
END
chmod +x superset/superset_init.sh
chmod +x superset/superset_config.py
chmod +x superset/superset_bootstrap.sh
	



And Save the file.






Step 13 :Check list of file in current directory
# ls -lrth
	



Output:   






Step 14 : Give permission 
# chmod +x pre-install-task.sh
	         * chmod : change the permissions of a file or directory.
         * +x : to add the execute permission to the file or directory.


Output:  


Step 15 :Run the script 
# sh pre-install-task.sh
	

         * sh: Command to run a shell interpreter.
         * pre-install-task.sh: Name of the shell script file to be executed.


Step 16 : install podman
sudo apt install podman 
	

         * sudo: Execute with superuser privileges.
         * apt: Package management tool.
         * install: Command to install a package.
         * podman: Name of the package (a containerization tool).


Output:


Problem 3   I got error while installing podman


  



For this i run below commands to solve this problem.


$ sudo sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_$(lsb_release -rs)/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
	

$ wget https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_$(lsb_release -rs)/Release.key
	

$ sudo apt-key add - < Release.key
	

$ sudo apt update
	

$ sudo apt install -y podman
	

$ podman --version
	

( I used chat GPT for this problem )


Step 17 : create the pods and containers 


# podman play kube final.yaml
	

         * The command podman play kube final.yaml will read the Kubernetes YAML file final.yaml and recreate the pods and containers described in the file.  create and start pods and containers without having to use the Kubernetes API or kubectl.


Output:   






Step 18 : To see running  containers.




# podman ps 
	

         * List the currently running containers managed by the Podman tool.
         * Provides information about container IDs, names, status, ports, and more.


Output : 


  





Test cases list


SNO
	Component/Tool Name
	Test case
	Test Count
	Test Cases
	Expected Result
	Test Passed [PASS/FAIL]
	Remarks
	 a
	Podman kube
	Login to superset 
	1
	

	Successful login 
	PASS


	

	 b
	Podman kube
	Delete the pods and recreate 
	

	

	No data loss
	PASS


	

	podman
  


         1. Go to the browser and write : 
192.168.1.254:8088/login/






  





Problem 4 . When i go the browser and give password and username i got error.


  



For this error i run below commands.
$ podman exec -it kubesuperset-pod-0-superset superset fab create-admin
	

$ podman exec -it kubesuperset-pod-0-superset superset db upgrade
	

$ podman exec -it kubesuperset-pod-0-superset superset load_examples
	

$ podman exec -it kubesuperset-pod-0-superset superset init
	



  















Reference link


https://helm.sh/docs/intro/install/


https://docs.podman.io/en/v4.2/markdown/podman-play-kube.1.html